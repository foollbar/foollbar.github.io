// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  //- Ring -----------------------------------------------------------------------

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;            

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var show = function (dict) {
      return dict.show;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var ringInt = new Ring(function () {
      return semiringInt;
  }, $foreign.intSub);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (__dict_Bind_24) {
      return bind(__dict_Bind_24);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ring"] = Ring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["sub"] = sub;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semiringInt"] = semiringInt;
  exports["ringInt"] = ringInt;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (__dict_Apply_1) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (__dict_Lazy_0) {
      return function (f) {
          return defer(__dict_Lazy_0)(function (_0) {
              return f(fix(__dict_Lazy_0)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                             
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (_2) {
          if (_2 instanceof Just) {
              return new Just(fn(_2.value0));
          };
          return Nothing.value;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;
  exports["error"] = $foreign.error;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var unsafePerformEff = function (_0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff(_0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;;
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
  var unsafeThrowException = function (_0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException(_0));
  };
  var unsafeThrow = function (_1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error(_1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;;
 
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.JQuery

  exports.ready = function(func) {
      return function() {
          jQuery(document).ready(func);
      };
  };
 
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["ready"] = $foreign.ready;;
 
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (_0) {
      if (_0 instanceof Data_Maybe.Just) {
          return _0.value0;
      };
      if (_0 instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ _0.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.floor = Math.floor;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var floor = function (_2) {
      return unsafeClamp($$Math.floor(_2));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var _1 = $foreign.random();
              return (function () {
                  var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * _1 + Data_Int.toNumber(low);
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Data_Int.floor(asNumber));
              })()();
          };
      };
  };
  exports["randomInt"] = randomInt;;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Exists

  exports.mkExists = function (fa) {
    return fa;
  };

  exports.runExists = function (f) {
    return function (fa) {
      return f(fa);
    };
  };
 
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Exists"];
  var Prelude = PS["Prelude"];
  exports["runExists"] = $foreign.runExists;
  exports["mkExists"] = $foreign.mkExists;;
 
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["readSTRef"] = $foreign.readSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (__dict_BooleanAlgebra_2) {
      return new Prelude.Semigroup(function (_10) {
          return function (_11) {
              return Prelude.conj(__dict_BooleanAlgebra_2)(_10)(_11);
          };
      });
  };
  var runConj = function (_0) {
      return _0;
  };
  var monoidConj = function (__dict_BooleanAlgebra_4) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(__dict_BooleanAlgebra_4);
      }, Prelude.top(__dict_BooleanAlgebra_4["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;;
 
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (__dict_Semigroup_1) {
      return new Prelude.Semigroup(function (_12) {
          return function (_13) {
              return Prelude["<>"](__dict_Semigroup_1)(_13)(_12);
          };
      });
  };
  var runDual = function (_0) {
      return _0;
  };
  var monoidDual = function (__dict_Monoid_3) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(__dict_Monoid_3));
  };
  exports["Dual"] = Dual;
  exports["runDual"] = runDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;;
 
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Prelude.Semigroup(function (_2) {
      return function (_3) {
          return function (_10) {
              return _2(_3(_10));
          };
      };
  });
  var runEndo = function (_0) {
      return _0;
  };
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Prelude.id(Prelude.categoryFn));
  exports["Endo"] = Endo;
  exports["runEndo"] = runEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;;
 
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (__dict_Applicative_0) {
      return function (__dict_Foldable_1) {
          return function (f) {
              return foldr(__dict_Foldable_1)(function (_109) {
                  return Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(f(_109));
              })(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
          };
      };
  };
  var for_ = function (__dict_Applicative_2) {
      return function (__dict_Foldable_3) {
          return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  }; 
  var foldlDefault = function (__dict_Foldable_33) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(__dict_Foldable_33)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function (_110) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)(_110)));
                  })(xs)))(u);
              };
          };
      };
  };
  var all = function (__dict_Foldable_46) {
      return function (__dict_BooleanAlgebra_47) {
          return function (p) {
              return function (_116) {
                  return Data_Monoid_Conj.runConj(foldMap(__dict_Foldable_46)(Data_Monoid_Conj.monoidConj(__dict_BooleanAlgebra_47))(function (_117) {
                      return Data_Monoid_Conj.Conj(p(_117));
                  })(_116));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldlDefault"] = foldlDefault;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Either.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Either.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var fromRight = function (_1) {
      if (_1 instanceof Data_Either.Right) {
          return _1.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromRight called on Left value");
  };
  exports["fromRight"] = fromRight;;
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];     
  var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function (_15) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f(_15));
          };
          return function __do() {
              var _3 = f$prime(a)();
              var _2 = {
                  value: _3
              };
              (function () {
                  while (!(function __do() {
                      var _1 = _2.value;
                      return (function () {
                          if (_1 instanceof Data_Either.Left) {
                              return function __do() {
                                  var _0 = f$prime(_1.value0)();
                                  _2.value = _0;
                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(false)();
                              };
                          };
                          if (_1 instanceof Data_Either.Right) {
                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Rec.Class line 75, column 1 - line 76, column 1: " + [ _1.constructor.name ]);
                      })()();
                  })()) {

                  };
                  return {};
              })();
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Either_Unsafe.fromRight)(Control_Monad_ST.readSTRef(_2))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;;
 
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Coyoneda = function (x) {
      return x;
  };
  var lowerCoyoneda = function (__dict_Functor_1) {
      return function (_6) {
          return Data_Exists.runExists(function (_4) {
              return Prelude["<$>"](__dict_Functor_1)(_4.k)(_4.fi);
          })(_6);
      };
  };
  var liftCoyoneda = function (fa) {
      return Coyoneda(Data_Exists.mkExists({
          k: Prelude.id(Prelude.categoryFn), 
          fi: fa
      }));
  }; 
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists({
              k: k, 
              fi: fi
          }));
      };
  };
  var functorCoyoneda = new Prelude.Functor(function (f) {
      return function (_8) {
          return Data_Exists.runExists(function (_0) {
              return coyoneda(function (_28) {
                  return f(_0.k(_28));
              })(_0.fi);
          })(_8);
      };
  });
  var liftCoyonedaT = function (nat) {
      return function (_7) {
          return Data_Exists.runExists(function (_5) {
              return coyoneda(_5.k)(nat(_5.fi));
          })(_7);
      };
  };
  var liftCoyonedaTF = function (__dict_Functor_4) {
      return function (nat) {
          return function (_30) {
              return lowerCoyoneda(__dict_Functor_4)(liftCoyonedaT(nat)(_30));
          };
      };
  };
  exports["Coyoneda"] = Coyoneda;
  exports["liftCoyonedaTF"] = liftCoyonedaTF;
  exports["liftCoyonedaT"] = liftCoyonedaT;
  exports["lowerCoyoneda"] = lowerCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["coyoneda"] = coyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;;
 
})(PS["Data.Coyoneda"] = PS["Data.Coyoneda"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Inject = PS["Data.Inject"];     
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Free = (function () {
      function Free(value0) {
          this.value0 = value0;
      };
      Free.create = function (value0) {
          return new Free(value0);
      };
      return Free;
  })();
  var Gosub = (function () {
      function Gosub(value0) {
          this.value0 = value0;
      };
      Gosub.create = function (value0) {
          return new Gosub(value0);
      };
      return Gosub;
  })();
  var MonadFree = function (wrap) {
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  }; 
  var monadFreeFree = function (__dict_Functor_7) {
      return new MonadFree(Free.create);
  };
  var liftF = function (__dict_Functor_12) {
      return function (__dict_Monad_13) {
          return function (__dict_MonadFree_14) {
              return function (_33) {
                  return wrap(__dict_MonadFree_14)(Prelude.map(__dict_Functor_12)(Prelude.pure(__dict_Monad_13["__superclass_Prelude.Applicative_0"]()))(_33));
              };
          };
      };
  };
  var gosub = function (a) {
      return function (f) {
          return Gosub.create(Data_Exists.mkExists({
              a: a, 
              f: f
          }));
      };
  };
  var monadFree = function (__dict_Functor_8) {
      return new Prelude.Monad(function () {
          return applicativeFree(__dict_Functor_8);
      }, function () {
          return bindFree(__dict_Functor_8);
      });
  };
  var functorFree = function (__dict_Functor_20) {
      return new Prelude.Functor(function (f) {
          return function (_4) {
              if (_4 instanceof Pure) {
                  return new Pure(f(_4.value0));
              };
              return Prelude.liftA1(applicativeFree(__dict_Functor_20))(f)(_4);
          };
      });
  };
  var bindFree = function (__dict_Functor_21) {
      return new Prelude.Bind(function () {
          return applyFree(__dict_Functor_21);
      }, function (_5) {
          return function (k) {
              if (_5 instanceof Gosub) {
                  return Data_Exists.runExists(function (_1) {
                      return gosub(_1.a)(function (x) {
                          return gosub(function (unit) {
                              return _1.f(x);
                          })(k);
                      });
                  })(_5.value0);
              };
              return gosub(function (unit) {
                  return _5;
              })(k);
          };
      });
  };
  var applyFree = function (__dict_Functor_25) {
      return new Prelude.Apply(function () {
          return functorFree(__dict_Functor_25);
      }, Prelude.ap(monadFree(__dict_Functor_25)));
  };
  var applicativeFree = function (__dict_Functor_26) {
      return new Prelude.Applicative(function () {
          return applyFree(__dict_Functor_26);
      }, Pure.create);
  };
  var resume = function (__copy___dict_Functor_0) {
      return function (__copy_f) {
          var __dict_Functor_0 = __copy___dict_Functor_0;
          var f = __copy_f;
          tco: while (true) {
              var resumeGosub = function (_6) {
                  if (_6 instanceof Gosub) {
                      return Data_Exists.runExists(function (_3) {
                          var _17 = _3.a(Prelude.unit);
                          if (_17 instanceof Pure) {
                              return new Data_Either.Right(_3.f(_17.value0));
                          };
                          if (_17 instanceof Free) {
                              return new Data_Either.Left(Prelude["<$>"](__dict_Functor_0)(function (h) {
                                  return Prelude[">>="](bindFree(__dict_Functor_0))(h)(_3.f);
                              })(_17.value0));
                          };
                          if (_17 instanceof Gosub) {
                              return Data_Exists.runExists(function (_2) {
                                  return new Data_Either.Right(Prelude[">>="](bindFree(__dict_Functor_0))(_2.a(Prelude.unit))(function (z) {
                                      return Prelude[">>="](bindFree(__dict_Functor_0))(_2.f(z))(_3.f);
                                  }));
                              })(_17.value0);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Free line 149, column 3 - line 150, column 3: " + [ _17.constructor.name ]);
                      })(_6.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 149, column 3 - line 150, column 3: " + [ _6.constructor.name ]);
              };
              if (f instanceof Pure) {
                  return new Data_Either.Right(f.value0);
              };
              if (f instanceof Free) {
                  return new Data_Either.Left(f.value0);
              };
              var _26 = resumeGosub(f);
              if (_26 instanceof Data_Either.Left) {
                  return new Data_Either.Left(_26.value0);
              };
              if (_26 instanceof Data_Either.Right) {
                  var __tco___dict_Functor_0 = __dict_Functor_0;
                  __dict_Functor_0 = __tco___dict_Functor_0;
                  f = _26.value0;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ _26.constructor.name ]);
          };
      };
  };
  var runFreeM = function (__dict_Functor_1) {
      return function (__dict_MonadRec_2) {
          return function (fn) {
              return Control_Monad_Rec_Class.tailRecM(__dict_MonadRec_2)(function (f) {
                  var _29 = resume(__dict_Functor_1)(f);
                  if (_29 instanceof Data_Either.Left) {
                      return Prelude["<$>"]((((__dict_MonadRec_2["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Left.create)(fn(_29.value0));
                  };
                  if (_29 instanceof Data_Either.Right) {
                      return Prelude["return"]((__dict_MonadRec_2["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_29.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 163, column 1 - line 164, column 1: " + [ _29.constructor.name ]);
              });
          };
      };
  };
  var runFreeCM = function (__dict_MonadRec_4) {
      return function (nat) {
          return runFreeM(Data_Coyoneda.functorCoyoneda)(__dict_MonadRec_4)(Data_Coyoneda.liftCoyonedaTF((((__dict_MonadRec_4["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(nat));
      };
  };
  var liftFC = function (_38) {
      return liftF(Data_Coyoneda.functorCoyoneda)(monadFree(Data_Coyoneda.functorCoyoneda))(monadFreeFree(Data_Coyoneda.functorCoyoneda))(Data_Coyoneda.liftCoyoneda(_38));
  };
  exports["Pure"] = Pure;
  exports["Free"] = Free;
  exports["Gosub"] = Gosub;
  exports["MonadFree"] = MonadFree;
  exports["runFreeCM"] = runFreeCM;
  exports["runFreeM"] = runFreeM;
  exports["liftFC"] = liftFC;
  exports["liftF"] = liftF;
  exports["wrap"] = wrap;
  exports["functorFree"] = functorFree;
  exports["applyFree"] = applyFree;
  exports["applicativeFree"] = applicativeFree;
  exports["bindFree"] = bindFree;
  exports["monadFree"] = monadFree;
  exports["monadFreeFree"] = monadFreeFree;;
 
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (_4) {
      return _4.value1;
  };                                                                                                    
  var fst = function (_3) {
      return _3.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer (thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      delete this.thunk;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Lazy = PS["Control.Lazy"];
  var functorLazy = new Prelude.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (_11) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["force"] = $foreign.force;
  exports["defer"] = $foreign.defer;;
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();                    
  var updateAt = function (_24) {
      return function (x) {
          return function (_25) {
              if (_24 === 0 && _25 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(x, _25.value1));
              };
              if (_25 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_25.value0))(updateAt(_24 - 1)(x)(_25.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (_67) {
              if (_67 instanceof Data_Maybe.Nothing) {
                  return Nil.value;
              };
              if (_67 instanceof Data_Maybe.Just) {
                  return new Cons(_67.value0.value0, go(f(_67.value0.value1)));
              };
              throw new Error("Failed pattern match at Data.List line 735, column 1 - line 741, column 1: " + [ _67.constructor.name ]);
          };
          return go(f(b));
      };
  });
  var toList = function (__dict_Foldable_2) {
      return Data_Foldable.foldr(__dict_Foldable_2)(Cons.create)(Nil.value);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy__41) {
              var acc = __copy_acc;
              var _41 = __copy__41;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_41 instanceof Nil) {
                      return acc_1;
                  };
                  if (_41 instanceof Cons) {
                      var __tco_acc = new Cons(_41.value0, acc);
                      var __tco__41 = _41.value1;
                      acc = __tco_acc;
                      _41 = __tco__41;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 365, column 1 - line 366, column 1: " + [ acc.constructor.name, _41.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy__55) {
                  return function (__copy__56) {
                      return function (__copy_acc) {
                          var _55 = __copy__55;
                          var _56 = __copy__56;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (_55 instanceof Nil) {
                                  return acc;
                              };
                              if (_56 instanceof Nil) {
                                  return acc;
                              };
                              if (_55 instanceof Cons && _56 instanceof Cons) {
                                  var __tco__55 = _55.value1;
                                  var __tco__56 = _56.value1;
                                  var __tco_acc = new Cons(f(_55.value0)(_56.value0), acc);
                                  _55 = __tco__55;
                                  _56 = __tco__56;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 651, column 1 - line 652, column 1: " + [ _55.constructor.name, _56.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var _163 = start > end;
                  if (_163) {
                      return 1;
                  };
                  if (!_163) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ _163.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var index = function (__copy__18) {
      return function (__copy__19) {
          var _18 = __copy__18;
          var _19 = __copy__19;
          tco: while (true) {
              if (_18 instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (_18 instanceof Cons && _19 === 0) {
                  return new Data_Maybe.Just(_18.value0);
              };
              if (_18 instanceof Cons) {
                  var __tco__18 = _18.value1;
                  var __tco__19 = _19 - 1;
                  _18 = __tco__18;
                  _19 = __tco__19;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ _18.constructor.name, _19.constructor.name ]);
          };
      };
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy__64) {
              return function (__copy_acc) {
                  var _64 = __copy__64;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (_64 instanceof Nil) {
                          return acc;
                      };
                      if (_64 instanceof Cons) {
                          var __tco__64 = _64.value1;
                          var __tco_acc = new Cons(f(_64.value0), acc);
                          _64 = __tco__64;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 718, column 1 - line 725, column 1: " + [ _64.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function (_319) {
                  return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_319));
              };
          })(Data_Monoid.mempty(__dict_Monoid_16));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__66) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _66 = __copy__66;
                  tco: while (true) {
                      var b_1 = b;
                      if (_66 instanceof Nil) {
                          return b_1;
                      };
                      if (_66 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_66.value0);
                          var __tco__66 = _66.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _66 = __tco__66;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_65) {
              if (_65 instanceof Nil) {
                  return b;
              };
              if (_65 instanceof Cons) {
                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
          };
      };
  });
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy__42) {
              var acc = __copy_acc;
              var _42 = __copy__42;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_42 instanceof Nil) {
                      return reverse(acc_1);
                  };
                  if (_42 instanceof Cons) {
                      if (p(_42.value0)) {
                          var __tco_acc = new Cons(_42.value0, acc);
                          var __tco__42 = _42.value1;
                          acc = __tco_acc;
                          _42 = __tco__42;
                          continue tco;
                      };
                      if (Prelude.otherwise) {
                          var __tco_acc = acc;
                          var __tco__42 = _42.value1;
                          acc = __tco_acc;
                          _42 = __tco__42;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 388, column 1 - line 389, column 1: " + [ acc.constructor.name, _42.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["filter"] = filter;
  exports["reverse"] = reverse;
  exports["updateAt"] = updateAt;
  exports["index"] = index;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["toList"] = toList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var runList = function (_6) {
      return _6;
  };
  var step = function (_203) {
      return Data_Lazy.force(runList(_203));
  };
  var uncons = function (xs) {
      var _56 = step(xs);
      if (_56 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (_56 instanceof Cons) {
          return new Data_Maybe.Just({
              head: _56.value0, 
              tail: _56.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 279, column 1 - line 280, column 1: " + [ _56.constructor.name ]);
  };
  var tail = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_1) {
          return _1.tail;
      })(uncons(xs));
  };
  var take = function (n) {
      return function (xs) {
          var go = function (_25) {
              return function (_26) {
                  if (_25 === 0) {
                      return Nil.value;
                  };
                  if (_26 instanceof Nil) {
                      return Nil.value;
                  };
                  if (_26 instanceof Cons) {
                      return new Cons(_26.value0, take(_25 - 1)(_26.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 446, column 3 - line 447, column 3: " + [ _25.constructor.name, _26.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function (_205) {
          return step(f(_205));
      }));
  });                    
  var head = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_0) {
          return _0.head;
      })(uncons(xs));
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (xs) {
          var go = function (_42) {
              if (_42 instanceof Nil) {
                  return Nil.value;
              };
              if (_42 instanceof Cons) {
                  return new Cons(f(_42.value0), Prelude["<$>"](functorList)(f)(_42.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 672, column 5 - line 673, column 5: " + [ _42.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var fromList = function (__dict_Unfoldable_3) {
      return Data_Unfoldable.unfoldr(__dict_Unfoldable_3)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
      return function (f) {
          return function (xs) {
              var go = function (_45) {
                  if (_45 instanceof Nil) {
                      return Data_Monoid.mempty(__dict_Monoid_4);
                  };
                  if (_45 instanceof Cons) {
                      return Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]())(f(_45.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_4)(f)(_45.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 691, column 5 - line 692, column 5: " + [ _45.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (_44) {
                  if (_44 instanceof Nil) {
                      return b;
                  };
                  if (_44 instanceof Cons) {
                      return Data_Foldable.foldl(foldableList)(o)(o(b)(_44.value0))(_44.value1);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 685, column 5 - line 686, column 5: " + [ _44.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (_43) {
                  if (_43 instanceof Nil) {
                      return b;
                  };
                  if (_43 instanceof Cons) {
                      return o(_43.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_43.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 679, column 5 - line 680, column 5: " + [ _43.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (_4) {
              return new Cons(x, xs);
          }));
      };
  };
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(lazyList)(function (xs) {
              return cons(x)(Prelude["<$>"](functorList)(f)(xs));
          });
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(lazyList)(function (xs) {
          return cons(x)(xs);
      });
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["List"] = List;
  exports["take"] = take;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["cons"] = cons;
  exports["iterate"] = iterate;
  exports["repeat"] = repeat;
  exports["step"] = step;
  exports["fromList"] = fromList;
  exports["runList"] = runList;
  exports["lazyList"] = lazyList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;;
 
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.setGlobalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];     
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (_8) {
          if (_8 === "left") {
              return AlignLeft.value;
          };
          if (_8 === "right") {
              return AlignRight.value;
          };
          if (_8 === "center") {
              return AlignCenter.value;
          };
          if (_8 === "start") {
              return AlignStart.value;
          };
          if (_8 === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + _8);
      };
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  };
  var showTextAlign = new Prelude.Show(function (_7) {
      if (_7 instanceof AlignLeft) {
          return "left";
      };
      if (_7 instanceof AlignRight) {
          return "right";
      };
      if (_7 instanceof AlignCenter) {
          return "center";
      };
      if (_7 instanceof AlignStart) {
          return "start";
      };
      if (_7 instanceof AlignEnd) {
          return "end";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 388, column 1 - line 395, column 1: " + [ _7.constructor.name ]);
  });
  var showComposite = new Prelude.Show(function (_6) {
      if (_6 instanceof SourceOver) {
          return "source-over";
      };
      if (_6 instanceof SourceIn) {
          return "source-in";
      };
      if (_6 instanceof SourceOut) {
          return "source-out";
      };
      if (_6 instanceof SourceAtop) {
          return "source-atop";
      };
      if (_6 instanceof DestinationOver) {
          return "destination-over";
      };
      if (_6 instanceof DestinationIn) {
          return "destination-in";
      };
      if (_6 instanceof DestinationOut) {
          return "destination-out";
      };
      if (_6 instanceof DestinationAtop) {
          return "destination-atop";
      };
      if (_6 instanceof Lighter) {
          return "lighter";
      };
      if (_6 instanceof Copy) {
          return "copy";
      };
      if (_6 instanceof Xor) {
          return "xor";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 228, column 1 - line 241, column 1: " + [ _6.constructor.name ]);
  });
  var setTextAlign = function (ctx) {
      return function (textalign) {
          return $foreign.setTextAlignImpl(ctx)(Prelude.show(showTextAlign)(textalign));
      };
  };
  var setLineCap = function (_5) {
      if (_5 instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (_5 instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (_5 instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 209, column 1 - line 210, column 1: " + [ _5.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          return $foreign.setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["showComposite"] = showComposite;
  exports["showTextAlign"] = showTextAlign;
  exports["drawImage"] = $foreign.drawImage;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["createImageData"] = $foreign.createImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["putImageData"] = $foreign.putImageData;
  exports["getImageData"] = $foreign.getImageData;
  exports["restore"] = $foreign.restore;
  exports["save"] = $foreign.save;
  exports["measureText"] = $foreign.measureText;
  exports["strokeText"] = $foreign.strokeText;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["font"] = $foreign.font;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["fillRect"] = $foreign.fillRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["fill"] = $foreign.fill;
  exports["stroke"] = $foreign.stroke;
  exports["beginPath"] = $foreign.beginPath;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];     
  var SetLineWidth = (function () {
      function SetLineWidth(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineWidth.create = function (value0) {
          return function (value1) {
              return new SetLineWidth(value0, value1);
          };
      };
      return SetLineWidth;
  })();
  var SetFillStyle = (function () {
      function SetFillStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFillStyle.create = function (value0) {
          return function (value1) {
              return new SetFillStyle(value0, value1);
          };
      };
      return SetFillStyle;
  })();
  var SetStrokeStyle = (function () {
      function SetStrokeStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetStrokeStyle.create = function (value0) {
          return function (value1) {
              return new SetStrokeStyle(value0, value1);
          };
      };
      return SetStrokeStyle;
  })();
  var SetShadowColor = (function () {
      function SetShadowColor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowColor.create = function (value0) {
          return function (value1) {
              return new SetShadowColor(value0, value1);
          };
      };
      return SetShadowColor;
  })();
  var SetShadowBlur = (function () {
      function SetShadowBlur(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowBlur.create = function (value0) {
          return function (value1) {
              return new SetShadowBlur(value0, value1);
          };
      };
      return SetShadowBlur;
  })();
  var SetShadowOffsetX = (function () {
      function SetShadowOffsetX(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetX.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetX(value0, value1);
          };
      };
      return SetShadowOffsetX;
  })();
  var SetShadowOffsetY = (function () {
      function SetShadowOffsetY(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetY.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetY(value0, value1);
          };
      };
      return SetShadowOffsetY;
  })();
  var SetLineCap = (function () {
      function SetLineCap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineCap.create = function (value0) {
          return function (value1) {
              return new SetLineCap(value0, value1);
          };
      };
      return SetLineCap;
  })();
  var SetComposite = (function () {
      function SetComposite(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetComposite.create = function (value0) {
          return function (value1) {
              return new SetComposite(value0, value1);
          };
      };
      return SetComposite;
  })();
  var SetAlpha = (function () {
      function SetAlpha(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetAlpha.create = function (value0) {
          return function (value1) {
              return new SetAlpha(value0, value1);
          };
      };
      return SetAlpha;
  })();
  var BeginPath = (function () {
      function BeginPath(value0) {
          this.value0 = value0;
      };
      BeginPath.create = function (value0) {
          return new BeginPath(value0);
      };
      return BeginPath;
  })();
  var Stroke = (function () {
      function Stroke(value0) {
          this.value0 = value0;
      };
      Stroke.create = function (value0) {
          return new Stroke(value0);
      };
      return Stroke;
  })();
  var Fill = (function () {
      function Fill(value0) {
          this.value0 = value0;
      };
      Fill.create = function (value0) {
          return new Fill(value0);
      };
      return Fill;
  })();
  var Clip = (function () {
      function Clip(value0) {
          this.value0 = value0;
      };
      Clip.create = function (value0) {
          return new Clip(value0);
      };
      return Clip;
  })();
  var LineTo = (function () {
      function LineTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LineTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LineTo(value0, value1, value2);
              };
          };
      };
      return LineTo;
  })();
  var MoveTo = (function () {
      function MoveTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      MoveTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new MoveTo(value0, value1, value2);
              };
          };
      };
      return MoveTo;
  })();
  var ClosePath = (function () {
      function ClosePath(value0) {
          this.value0 = value0;
      };
      ClosePath.create = function (value0) {
          return new ClosePath(value0);
      };
      return ClosePath;
  })();
  var Arc = (function () {
      function Arc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arc.create = function (value0) {
          return function (value1) {
              return new Arc(value0, value1);
          };
      };
      return Arc;
  })();
  var Rect = (function () {
      function Rect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rect.create = function (value0) {
          return function (value1) {
              return new Rect(value0, value1);
          };
      };
      return Rect;
  })();
  var FillRect = (function () {
      function FillRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FillRect.create = function (value0) {
          return function (value1) {
              return new FillRect(value0, value1);
          };
      };
      return FillRect;
  })();
  var StrokeRect = (function () {
      function StrokeRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StrokeRect.create = function (value0) {
          return function (value1) {
              return new StrokeRect(value0, value1);
          };
      };
      return StrokeRect;
  })();
  var ClearRect = (function () {
      function ClearRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ClearRect.create = function (value0) {
          return function (value1) {
              return new ClearRect(value0, value1);
          };
      };
      return ClearRect;
  })();
  var Scale = (function () {
      function Scale(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Scale(value0, value1, value2);
              };
          };
      };
      return Scale;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Translate = (function () {
      function Translate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Translate(value0, value1, value2);
              };
          };
      };
      return Translate;
  })();
  var Transform = (function () {
      function Transform(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Transform.create = function (value0) {
          return function (value1) {
              return new Transform(value0, value1);
          };
      };
      return Transform;
  })();
  var TextAlign = (function () {
      function TextAlign(value0) {
          this.value0 = value0;
      };
      TextAlign.create = function (value0) {
          return new TextAlign(value0);
      };
      return TextAlign;
  })();
  var SetTextAlign = (function () {
      function SetTextAlign(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetTextAlign.create = function (value0) {
          return function (value1) {
              return new SetTextAlign(value0, value1);
          };
      };
      return SetTextAlign;
  })();
  var Font = (function () {
      function Font(value0) {
          this.value0 = value0;
      };
      Font.create = function (value0) {
          return new Font(value0);
      };
      return Font;
  })();
  var SetFont = (function () {
      function SetFont(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFont.create = function (value0) {
          return function (value1) {
              return new SetFont(value0, value1);
          };
      };
      return SetFont;
  })();
  var FillText = (function () {
      function FillText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FillText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FillText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FillText;
  })();
  var StrokeText = (function () {
      function StrokeText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      StrokeText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new StrokeText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return StrokeText;
  })();
  var MeasureText = (function () {
      function MeasureText(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MeasureText.create = function (value0) {
          return function (value1) {
              return new MeasureText(value0, value1);
          };
      };
      return MeasureText;
  })();
  var Save = (function () {
      function Save(value0) {
          this.value0 = value0;
      };
      Save.create = function (value0) {
          return new Save(value0);
      };
      return Save;
  })();
  var Restore = (function () {
      function Restore(value0) {
          this.value0 = value0;
      };
      Restore.create = function (value0) {
          return new Restore(value0);
      };
      return Restore;
  })();
  var GetImageData = (function () {
      function GetImageData(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      GetImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new GetImageData(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return GetImageData;
  })();
  var PutImageData = (function () {
      function PutImageData(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      PutImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new PutImageData(value0, value1, value2, value3);
                  };
              };
          };
      };
      return PutImageData;
  })();
  var PutImageDataFull = (function () {
      function PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
          this.value7 = value7;
      };
      PutImageDataFull.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return function (value7) {
                                      return new PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
      return PutImageDataFull;
  })();
  var CreateImageData = (function () {
      function CreateImageData(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CreateImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CreateImageData(value0, value1, value2);
              };
          };
      };
      return CreateImageData;
  })();
  var CreateImageDataCopy = (function () {
      function CreateImageDataCopy(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CreateImageDataCopy.create = function (value0) {
          return function (value1) {
              return new CreateImageDataCopy(value0, value1);
          };
      };
      return CreateImageDataCopy;
  })();
  var DrawImage = (function () {
      function DrawImage(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DrawImage.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DrawImage(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DrawImage;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Control_Monad_Free.liftFC(new Translate(tx, ty, Prelude.unit));
      };
  };
  var transform = function (tx) {
      return Control_Monad_Free.liftFC(new Transform(tx, Prelude.unit));
  };
  var textAlign = Control_Monad_Free.liftFC(new TextAlign(Prelude.id(Prelude.categoryFn)));
  var strokeText = function (s) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new StrokeText(s, x, y, Prelude.unit));
          };
      };
  };
  var strokeRect = function (r) {
      return Control_Monad_Free.liftFC(new StrokeRect(r, Prelude.unit));
  };
  var stroke = Control_Monad_Free.liftFC(new Stroke(Prelude.unit));
  var setTextAlign = function (ta) {
      return Control_Monad_Free.liftFC(new SetTextAlign(ta, Prelude.unit));
  };
  var setStrokeStyle = function (s) {
      return Control_Monad_Free.liftFC(new SetStrokeStyle(s, Prelude.unit));
  };
  var setShadowOffsetY = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowOffsetY(n, Prelude.unit));
  };
  var setShadowOffsetX = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowOffsetX(n, Prelude.unit));
  };
  var setShadowColor = function (c) {
      return Control_Monad_Free.liftFC(new SetShadowColor(c, Prelude.unit));
  };
  var setShadowBlur = function (n) {
      return Control_Monad_Free.liftFC(new SetShadowBlur(n, Prelude.unit));
  };
  var setLineWidth = function (w) {
      return Control_Monad_Free.liftFC(new SetLineWidth(w, Prelude.unit));
  };
  var setLineCap = function (lc) {
      return Control_Monad_Free.liftFC(new SetLineCap(lc, Prelude.unit));
  };
  var setFont = function (f) {
      return Control_Monad_Free.liftFC(new SetFont(f, Prelude.unit));
  };
  var setFillStyle = function (s) {
      return Control_Monad_Free.liftFC(new SetFillStyle(s, Prelude.unit));
  };
  var scale = function (sx) {
      return function (sy) {
          return Control_Monad_Free.liftFC(new Scale(sx, sy, Prelude.unit));
      };
  };
  var save = Control_Monad_Free.liftFC(new Save(Prelude.unit));
  var rotate = function (th) {
      return Control_Monad_Free.liftFC(new Rotate(th, Prelude.unit));
  };
  var restore = Control_Monad_Free.liftFC(new Restore(Prelude.unit));
  var rect = function (r) {
      return Control_Monad_Free.liftFC(new Rect(r, Prelude.unit));
  };
  var putImageDataFull = function (d) {
      return function (x) {
          return function (y) {
              return function (dx) {
                  return function (dy) {
                      return function (dw) {
                          return function (dh) {
                              return Control_Monad_Free.liftFC(new PutImageDataFull(d, x, y, dx, dy, dw, dh, Prelude.unit));
                          };
                      };
                  };
              };
          };
      };
  };
  var putImageData = function (d) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new PutImageData(d, x, y, Prelude.unit));
          };
      };
  };
  var moveTo = function (x) {
      return function (y) {
          return Control_Monad_Free.liftFC(new MoveTo(x, y, Prelude.unit));
      };
  };
  var measureText = function (s) {
      return Control_Monad_Free.liftFC(new MeasureText(s, Prelude.id(Prelude.categoryFn)));
  };
  var lineTo = function (x) {
      return function (y) {
          return Control_Monad_Free.liftFC(new LineTo(x, y, Prelude.unit));
      };
  };
  var getImageData = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return Control_Monad_Free.liftFC(new GetImageData(x, y, w, h, Prelude.id(Prelude.categoryFn)));
              };
          };
      };
  };
  var font = Control_Monad_Free.liftFC(new Font(Prelude.id(Prelude.categoryFn)));
  var fillText = function (s) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new FillText(s, x, y, Prelude.unit));
          };
      };
  };
  var fillRect = function (r) {
      return Control_Monad_Free.liftFC(new FillRect(r, Prelude.unit));
  };
  var fill = Control_Monad_Free.liftFC(new Fill(Prelude.unit));
  var drawImage = function (src) {
      return function (x) {
          return function (y) {
              return Control_Monad_Free.liftFC(new DrawImage(src, x, y, Prelude.unit));
          };
      };
  };
  var createImageDataCopy = function (d) {
      return Control_Monad_Free.liftFC(new CreateImageDataCopy(d, Prelude.id(Prelude.categoryFn)));
  };
  var createImageData = function (w) {
      return function (h) {
          return Control_Monad_Free.liftFC(new CreateImageData(w, h, Prelude.id(Prelude.categoryFn)));
      };
  };
  var closePath = Control_Monad_Free.liftFC(new ClosePath(Prelude.unit));
  var clip = Control_Monad_Free.liftFC(new Clip(Prelude.unit));
  var clearRect = function (r) {
      return Control_Monad_Free.liftFC(new ClearRect(r, Prelude.unit));
  };
  var beginPath = Control_Monad_Free.liftFC(new BeginPath(Prelude.unit));
  var arc = function (a) {
      return Control_Monad_Free.liftFC(new Arc(a, Prelude.unit));
  };
  var runGraphics = function (ctx) {
      var interp = function (_0) {
          if (_0 instanceof SetLineWidth) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setLineWidth(_0.value0)(ctx));
          };
          if (_0 instanceof SetFillStyle) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setFillStyle(_0.value0)(ctx));
          };
          if (_0 instanceof SetStrokeStyle) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setStrokeStyle(_0.value0)(ctx));
          };
          if (_0 instanceof SetShadowColor) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setShadowColor(_0.value0)(ctx));
          };
          if (_0 instanceof SetShadowBlur) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setShadowBlur(_0.value0)(ctx));
          };
          if (_0 instanceof SetShadowOffsetX) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setShadowOffsetX(_0.value0)(ctx));
          };
          if (_0 instanceof SetShadowOffsetY) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setShadowOffsetY(_0.value0)(ctx));
          };
          if (_0 instanceof SetLineCap) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setLineCap(_0.value0)(ctx));
          };
          if (_0 instanceof SetComposite) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setGlobalCompositeOperation(ctx)(_0.value0));
          };
          if (_0 instanceof SetAlpha) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setGlobalAlpha(ctx)(_0.value0));
          };
          if (_0 instanceof BeginPath) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.beginPath(ctx));
          };
          if (_0 instanceof Stroke) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.stroke(ctx));
          };
          if (_0 instanceof Fill) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.fill(ctx));
          };
          if (_0 instanceof Clip) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.clip(ctx));
          };
          if (_0 instanceof LineTo) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value2))(Graphics_Canvas.lineTo(ctx)(_0.value0)(_0.value1));
          };
          if (_0 instanceof MoveTo) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value2))(Graphics_Canvas.moveTo(ctx)(_0.value0)(_0.value1));
          };
          if (_0 instanceof ClosePath) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.closePath(ctx));
          };
          if (_0 instanceof Arc) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.arc(ctx)(_0.value0));
          };
          if (_0 instanceof Rect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.rect(ctx)(_0.value0));
          };
          if (_0 instanceof FillRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.fillRect(ctx)(_0.value0));
          };
          if (_0 instanceof StrokeRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.strokeRect(ctx)(_0.value0));
          };
          if (_0 instanceof ClearRect) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.clearRect(ctx)(_0.value0));
          };
          if (_0 instanceof Scale) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value2))(Graphics_Canvas.scale({
                  scaleX: _0.value0, 
                  scaleY: _0.value1
              })(ctx));
          };
          if (_0 instanceof Rotate) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.rotate(_0.value0)(ctx));
          };
          if (_0 instanceof Translate) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value2))(Graphics_Canvas.translate({
                  translateX: _0.value0, 
                  translateY: _0.value1
              })(ctx));
          };
          if (_0 instanceof Transform) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.transform(_0.value0)(ctx));
          };
          if (_0 instanceof TextAlign) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value0)(Graphics_Canvas.textAlign(ctx));
          };
          if (_0 instanceof SetTextAlign) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setTextAlign(ctx)(_0.value0));
          };
          if (_0 instanceof Font) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value0)(Graphics_Canvas.font(ctx));
          };
          if (_0 instanceof SetFont) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value1))(Graphics_Canvas.setFont(_0.value0)(ctx));
          };
          if (_0 instanceof FillText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value3))(Graphics_Canvas.fillText(ctx)(_0.value0)(_0.value1)(_0.value2));
          };
          if (_0 instanceof StrokeText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value3))(Graphics_Canvas.strokeText(ctx)(_0.value0)(_0.value1)(_0.value2));
          };
          if (_0 instanceof MeasureText) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value1)(Graphics_Canvas.measureText(ctx)(_0.value0));
          };
          if (_0 instanceof Save) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.save(ctx));
          };
          if (_0 instanceof Restore) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value0))(Graphics_Canvas.restore(ctx));
          };
          if (_0 instanceof GetImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value4)(Graphics_Canvas.getImageData(ctx)(_0.value0)(_0.value1)(_0.value2)(_0.value3));
          };
          if (_0 instanceof PutImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value3))(Graphics_Canvas.putImageData(ctx)(_0.value0)(_0.value1)(_0.value2));
          };
          if (_0 instanceof PutImageDataFull) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value7))(Graphics_Canvas.putImageDataFull(ctx)(_0.value0)(_0.value1)(_0.value2)(_0.value3)(_0.value4)(_0.value5)(_0.value6));
          };
          if (_0 instanceof CreateImageData) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value2)(Graphics_Canvas.createImageData(ctx)(_0.value0)(_0.value1));
          };
          if (_0 instanceof CreateImageDataCopy) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(_0.value1)(Graphics_Canvas.createImageDataCopy(ctx)(_0.value0));
          };
          if (_0 instanceof DrawImage) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](_0.value3))(Graphics_Canvas.drawImage(ctx)(_0.value0)(_0.value1)(_0.value2));
          };
          throw new Error("Failed pattern match at Graphics.Canvas.Free line 235, column 3 - line 236, column 3: " + [ _0.constructor.name ]);
      };
      return Control_Monad_Free.runFreeCM(Control_Monad_Rec_Class.monadRecEff)(interp);
  };
  exports["runGraphics"] = runGraphics;
  exports["drawImage"] = drawImage;
  exports["createImageDataCopy"] = createImageDataCopy;
  exports["createImageData"] = createImageData;
  exports["putImageDataFull"] = putImageDataFull;
  exports["putImageData"] = putImageData;
  exports["getImageData"] = getImageData;
  exports["restore"] = restore;
  exports["save"] = save;
  exports["measureText"] = measureText;
  exports["strokeText"] = strokeText;
  exports["fillText"] = fillText;
  exports["setFont"] = setFont;
  exports["font"] = font;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["transform"] = transform;
  exports["translate"] = translate;
  exports["rotate"] = rotate;
  exports["scale"] = scale;
  exports["clearRect"] = clearRect;
  exports["strokeRect"] = strokeRect;
  exports["fillRect"] = fillRect;
  exports["rect"] = rect;
  exports["arc"] = arc;
  exports["closePath"] = closePath;
  exports["moveTo"] = moveTo;
  exports["lineTo"] = lineTo;
  exports["clip"] = clip;
  exports["fill"] = fill;
  exports["stroke"] = stroke;
  exports["beginPath"] = beginPath;
  exports["setLineCap"] = setLineCap;
  exports["setShadowOffsetY"] = setShadowOffsetY;
  exports["setShadowOffsetX"] = setShadowOffsetX;
  exports["setShadowBlur"] = setShadowBlur;
  exports["setShadowColor"] = setShadowColor;
  exports["setStrokeStyle"] = setStrokeStyle;
  exports["setFillStyle"] = setFillStyle;
  exports["setLineWidth"] = setLineWidth;;
 
})(PS["Graphics.Canvas.Free"] = PS["Graphics.Canvas.Free"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };

  exports.mergeP =
    function mergeP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig1.get());
          sig2.subscribe(out.set);
          sig1.subscribe(out.set);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];     
  var $tilde$greater = function (__dict_Functor_0) {
      return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
  };                                                   
  var merge = $foreign.mergeP($foreign.constant);
  var mergeMany = function (__dict_Functor_3) {
      return function (__dict_Foldable_4) {
          return function (sigs) {
              var mergeMaybe = function (_0) {
                  return function (_1) {
                      if (_1 instanceof Data_Maybe.Nothing) {
                          return _0;
                      };
                      if (_0 instanceof Data_Maybe.Nothing) {
                          return _1;
                      };
                      if (_0 instanceof Data_Maybe.Just && _1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(merge(_0.value0)(_1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 52, column 9 - line 53, column 9: " + [ _0.constructor.name, _1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(__dict_Foldable_4)(mergeMaybe)(Data_Maybe.Nothing.value)(Prelude["<$>"](__dict_Functor_3)(Data_Maybe.Just.create)(sigs));
          };
      };
  };                                                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  exports["~>"] = $tilde$greater;
  exports["foldp"] = foldp;
  exports["mergeMany"] = mergeMany;
  exports["merge"] = merge;
  exports["functorSignal"] = functorSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  exports["keyPressed"] = keyPressed;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Int = PS["Data.Int"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var Signal_DOM = PS["Signal.DOM"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Coyoneda = PS["Data.Coyoneda"];     
  var Cell = (function () {
      function Cell(value0) {
          this.value0 = value0;
      };
      Cell.create = function (value0) {
          return new Cell(value0);
      };
      return Cell;
  })();
  var EmptyCell = (function () {
      function EmptyCell() {

      };
      EmptyCell.value = new EmptyCell();
      return EmptyCell;
  })();
  var Stick = (function () {
      function Stick(value0) {
          this.value0 = value0;
      };
      Stick.create = function (value0) {
          return new Stick(value0);
      };
      return Stick;
  })();
  var Square = (function () {
      function Square(value0) {
          this.value0 = value0;
      };
      Square.create = function (value0) {
          return new Square(value0);
      };
      return Square;
  })();
  var Tturn = (function () {
      function Tturn(value0) {
          this.value0 = value0;
      };
      Tturn.create = function (value0) {
          return new Tturn(value0);
      };
      return Tturn;
  })();
  var RightSnake = (function () {
      function RightSnake(value0) {
          this.value0 = value0;
      };
      RightSnake.create = function (value0) {
          return new RightSnake(value0);
      };
      return RightSnake;
  })();
  var LeftSnake = (function () {
      function LeftSnake(value0) {
          this.value0 = value0;
      };
      LeftSnake.create = function (value0) {
          return new LeftSnake(value0);
      };
      return LeftSnake;
  })();
  var LeftGun = (function () {
      function LeftGun(value0) {
          this.value0 = value0;
      };
      LeftGun.create = function (value0) {
          return new LeftGun(value0);
      };
      return LeftGun;
  })();
  var RightGun = (function () {
      function RightGun(value0) {
          this.value0 = value0;
      };
      RightGun.create = function (value0) {
          return new RightGun(value0);
      };
      return RightGun;
  })();
  var NewGame = (function () {
      function NewGame() {

      };
      NewGame.value = new NewGame();
      return NewGame;
  })();
  var Tick = (function () {
      function Tick() {

      };
      Tick.value = new Tick();
      return Tick;
  })();
  var LeftPress = (function () {
      function LeftPress() {

      };
      LeftPress.value = new LeftPress();
      return LeftPress;
  })();
  var UpPress = (function () {
      function UpPress() {

      };
      UpPress.value = new UpPress();
      return UpPress;
  })();
  var RightPress = (function () {
      function RightPress() {

      };
      RightPress.value = new RightPress();
      return RightPress;
  })();
  var DownPress = (function () {
      function DownPress() {

      };
      DownPress.value = new DownPress();
      return DownPress;
  })();
  var SpacePress = (function () {
      function SpacePress() {

      };
      SpacePress.value = new SpacePress();
      return SpacePress;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var withContext = function (action) {
      return function __do() {
          var _12 = Graphics_Canvas.getCanvasElementById("c")();
          return (function () {
              if (_12 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var _11 = Graphics_Canvas.getContext2D(_12.value0)();
                      return Graphics_Canvas_Free.runGraphics(_11)(action)();
                  };
              };
              if (_12 instanceof Data_Maybe.Nothing) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              };
              throw new Error("Failed pattern match at Main line 156, column 1 - line 164, column 1: " + [ _12.constructor.name ]);
          })()();
      };
  };
  var width = 400.0;
  var swapRow = function (i) {
      return function (j) {
          return function (l) {
              var r2 = Data_Maybe_Unsafe.fromJust(Data_List.index(l)(j));
              var r1 = Data_Maybe_Unsafe.fromJust(Data_List.index(l)(i));
              var l1 = Data_Maybe_Unsafe.fromJust(Data_List.updateAt(i)(r2)(l));
              var l2 = Data_Maybe_Unsafe.fromJust(Data_List.updateAt(j)(r1)(l1));
              return l2;
          };
      };
  };
  var set = function (i) {
      return function (j) {
          return function (v) {
              return function (l) {
                  var row = Data_Maybe_Unsafe.fromJust(Data_List.updateAt(j)(v)(Data_Maybe_Unsafe.fromJust(Data_List.index(l)(i))));
                  return Data_Maybe_Unsafe.fromJust(Data_List.updateAt(i)(row)(l));
              };
          };
      };
  };
  var nextOwn = function (own) {
      var r = Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Random.randomInt(0)(6));
      var b = Data_Maybe_Unsafe.fromJust(Data_Array["!!"]([ new Stick(0), new Square(0), new Tturn(0), new RightSnake(0), new LeftSnake(0), new LeftGun(0), new RightGun(0) ])(r));
      var _31 = {};
      for (var _32 in own) {
          if (own.hasOwnProperty(_32)) {
              _31[_32] = own[_32];
          };
      };
      _31.block = b;
      _31.pos = {
          x: 9, 
          y: 0
      };
      return _31;
  };
  var newGameState = (function () {
      var row = Data_List_Lazy.fromList(Data_List.unfoldableList)(Data_List_Lazy.take(20)(Data_List_Lazy.repeat(EmptyCell.value)));
      var rows = Data_List_Lazy.fromList(Data_List.unfoldableList)(Data_List_Lazy.take(30)(Data_List_Lazy.repeat(row)));
      return {
          playing: true, 
          own: {
              block: new Tturn(1), 
              pos: {
                  x: 9, 
                  y: 0
              }
          }, 
          cells: rows
      };
  })();
  var moveBlock = function (f) {
      return function (game) {
          var _35 = {};
          for (var _36 in game) {
              if (game.hasOwnProperty(_36)) {
                  _35[_36] = game[_36];
              };
          };
          _35.own = (function () {
              var _33 = {};
              for (var _34 in game.own) {
                  if (game.own.hasOwnProperty(_34)) {
                      _33[_34] = game.own[_34];
                  };
              };
              _33.pos = f(game.own.pos);
              return _33;
          })();
          return _35;
      };
  };
  var move = function (fx) {
      return function (fy) {
          return function (p) {
              var _37 = {};
              for (var _38 in p) {
                  if (p.hasOwnProperty(_38)) {
                      _37[_38] = p[_38];
                  };
              };
              _37.x = fx(p.x);
              _37.y = fy(p.y);
              return _37;
          };
      };
  };
  var right = move(function (_0) {
      return _0 + 1 | 0;
  })(Prelude.id(Prelude.categoryFn));
  var minus = Prelude.flip(Prelude.sub(Prelude.ringInt));
  var up = move(Prelude.id(Prelude.categoryFn))(minus(1));
  var squares = [ [ Prelude.id(Prelude.categoryFn), up, Prelude[">>>"](Prelude.semigroupoidFn)(right)(up), right ] ];
  var sticks = [ [ Prelude.id(Prelude.categoryFn), up, Prelude[">>>"](Prelude.semigroupoidFn)(up)(up), Prelude[">>>"](Prelude.semigroupoidFn)(up)(Prelude[">>>"](Prelude.semigroupoidFn)(up)(up)) ], [ Prelude.id(Prelude.categoryFn), right, Prelude[">>>"](Prelude.semigroupoidFn)(right)(right), Prelude[">>>"](Prelude.semigroupoidFn)(right)(Prelude[">>>"](Prelude.semigroupoidFn)(right)(right)) ] ];
  var left = move(minus(1))(Prelude.id(Prelude.categoryFn));
  var inBound = function (p) {
      var _39 = p.x >= 0 && (p.x < 20 && p.y < 30);
      if (_39) {
          return true;
      };
      if (!_39) {
          return false;
      };
      throw new Error("Failed pattern match at Main line 225, column 1 - line 226, column 1: " + [ _39.constructor.name ]);
  };
  var height = 600.0;
  var get = function (i) {
      return function (j) {
          return function (l) {
              var _40 = Data_List.index(l)(i);
              if (_40 instanceof Data_Maybe.Just) {
                  return Data_List.index(_40.value0)(j);
              };
              if (_40 instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Main line 55, column 1 - line 56, column 1: " + [ _40.constructor.name ]);
          };
      };
  };
  var isAvailPos = function (plane) {
      return function (point) {
          var _42 = get(point.y)(point.x)(plane);
          if (_42 instanceof Data_Maybe.Just && _42.value0 instanceof Cell) {
              return false;
          };
          var _45 = inBound(point);
          if (_45) {
              return true;
          };
          if (!_45) {
              return false;
          };
          throw new Error("Failed pattern match at Main line 228, column 1 - line 229, column 1: " + [ _45.constructor.name ]);
      };
  };
  var fullRows = function (plane) {
      var isEmpty = function (_26) {
          if (_26 instanceof EmptyCell) {
              return true;
          };
          return false;
      };
      var isRowFull = function (row) {
          return Data_Foldable.all(Data_List.foldableList)(Prelude.booleanAlgebraBoolean)(function (_135) {
              return !isEmpty(_135);
          })(row);
      };
      var p1 = Prelude.map(Data_List.functorList)(isRowFull)(plane);
      var p2 = Data_List.filter(Data_Tuple.snd)(Data_List.zip(Data_List[".."](0)(29))(p1));
      var p3 = Prelude.map(Data_List.functorList)(Data_Tuple.fst)(p2);
      return p3;
  };
  var finish = function (game) {
      var _47 = {};
      for (var _48 in game) {
          if (game.hasOwnProperty(_48)) {
              _47[_48] = game[_48];
          };
      };
      _47.playing = false;
      return _47;
  };
  var drawGrid = (function () {
      var drawVertical = function (x) {
          return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.beginPath)(function () {
              return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.moveTo(x)(0.0))(function () {
                  return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.lineTo(x)(height))(function () {
                      return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.closePath)(function () {
                          return Graphics_Canvas_Free.stroke;
                      });
                  });
              });
          });
      };
      var drawHorizontal = function (y) {
          return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.beginPath)(function () {
              return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.moveTo(0.0)(y))(function () {
                  return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.lineTo(width)(y))(function () {
                      return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.closePath)(function () {
                          return Graphics_Canvas_Free.stroke;
                      });
                  });
              });
          });
      };
      return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setStrokeStyle("black"))(function () {
          return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Data_Foldable.traverse_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_List_Lazy.foldableList)(drawVertical)(Data_List_Lazy.take(20)(Data_List_Lazy.iterate(function (_9) {
              return _9 + 20.0;
          })(0.0))))(function () {
              return Data_Foldable.traverse_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_List_Lazy.foldableList)(drawHorizontal)(Data_List_Lazy.take(30)(Data_List_Lazy.iterate(function (_10) {
                  return _10 + 20.0;
              })(0.0)));
          });
      });
  })();
  var drawCell = function (row) {
      return function (col) {
          return function (color) {
              return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setFillStyle(color))(function () {
                  return Graphics_Canvas_Free.fillRect({
                      x: 1.0 + col * 20.0, 
                      y: 1.0 + row * 20.0, 
                      w: 18.0, 
                      h: 18.0
                  });
              });
          };
      };
  };
  var drawCells = function (rows) {
      return Data_Foldable.for_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_List.foldableList)(Data_List.zip(Data_List[".."](0)(29))(rows))(function (_19) {
          return Data_Foldable.for_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_List.foldableList)(Data_List.zip(Data_List[".."](0)(19))(_19.value1))(function (_18) {
              if (_18.value1 instanceof Cell) {
                  return drawCell(Data_Int.toNumber(_19.value0))(Data_Int.toNumber(_18.value0))(_18.value1.value0);
              };
              if (_18.value1 instanceof EmptyCell) {
                  return Prelude["return"](Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Prelude.unit);
              };
              throw new Error("Failed pattern match at Main line 196, column 1 - line 203, column 1: " + [ _18.value1.constructor.name ]);
          });
      });
  };
  var drawBackground = Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.setFillStyle("#444444"))(function () {
      return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(Graphics_Canvas_Free.rect({
          x: 0.0, 
          y: 0.0, 
          w: width, 
          h: height
      }))(function () {
          return Graphics_Canvas_Free.fill;
      });
  });
  var down = move(Prelude.id(Prelude.categoryFn))(function (_1) {
      return _1 + 1 | 0;
  });
  var lguns = [ [ Prelude.id(Prelude.categoryFn), right, Prelude[">>>"](Prelude.semigroupoidFn)(right)(down), left ], [ Prelude.id(Prelude.categoryFn), up, Prelude[">>>"](Prelude.semigroupoidFn)(up)(right), down ], [ Prelude.id(Prelude.categoryFn), right, left, Prelude[">>>"](Prelude.semigroupoidFn)(left)(up) ], [ Prelude.id(Prelude.categoryFn), up, down, Prelude[">>>"](Prelude.semigroupoidFn)(left)(down) ] ];
  var lsnakes = [ [ Prelude.id(Prelude.categoryFn), Prelude[">>>"](Prelude.semigroupoidFn)(right)(down), down, left ], [ Prelude.id(Prelude.categoryFn), up, Prelude[">>>"](Prelude.semigroupoidFn)(left)(down), left ] ];
  var rguns = [ [ Prelude.id(Prelude.categoryFn), right, Prelude[">>>"](Prelude.semigroupoidFn)(left)(down), left ], [ Prelude.id(Prelude.categoryFn), up, Prelude[">>>"](Prelude.semigroupoidFn)(right)(down), down ], [ Prelude.id(Prelude.categoryFn), Prelude[">>>"](Prelude.semigroupoidFn)(right)(up), right, left ], [ Prelude.id(Prelude.categoryFn), up, down, Prelude[">>>"](Prelude.semigroupoidFn)(right)(up) ] ];
  var rsnakes = [ [ Prelude.id(Prelude.categoryFn), right, down, Prelude[">>>"](Prelude.semigroupoidFn)(down)(left) ], [ Prelude.id(Prelude.categoryFn), up, right, Prelude[">>>"](Prelude.semigroupoidFn)(right)(down) ] ];
  var tturns = [ [ Prelude.id(Prelude.categoryFn), up, right, left ], [ Prelude.id(Prelude.categoryFn), up, right, down ], [ Prelude.id(Prelude.categoryFn), right, down, left ], [ Prelude.id(Prelude.categoryFn), up, down, left ] ];
  var nextShape = function (_24) {
      if (_24 instanceof Stick) {
          return Stick.create((_24.value0 + 1 | 0) % Data_Array.length(sticks));
      };
      if (_24 instanceof Square) {
          return Square.create((_24.value0 + 1 | 0) % Data_Array.length(squares));
      };
      if (_24 instanceof Tturn) {
          return Tturn.create((_24.value0 + 1 | 0) % Data_Array.length(tturns));
      };
      if (_24 instanceof RightSnake) {
          return RightSnake.create((_24.value0 + 1 | 0) % Data_Array.length(rsnakes));
      };
      if (_24 instanceof LeftSnake) {
          return LeftSnake.create((_24.value0 + 1 | 0) % Data_Array.length(lsnakes));
      };
      if (_24 instanceof LeftGun) {
          return LeftGun.create((_24.value0 + 1 | 0) % Data_Array.length(lguns));
      };
      if (_24 instanceof RightGun) {
          return RightGun.create((_24.value0 + 1 | 0) % Data_Array.length(rguns));
      };
      throw new Error("Failed pattern match at Main line 147, column 1 - line 148, column 1: " + [ _24.constructor.name ]);
  };
  var rotateBlock = function (game) {
      var next = nextShape(game.own.block);
      var _67 = {};
      for (var _68 in game) {
          if (game.hasOwnProperty(_68)) {
              _67[_68] = game[_68];
          };
      };
      _67.own = (function () {
          var _65 = {};
          for (var _66 in game.own) {
              if (game.own.hasOwnProperty(_66)) {
                  _65[_66] = game.own[_66];
              };
          };
          _65.block = next;
          return _65;
      })();
      return _67;
  };
  var points = function (_22) {
      if (_22.block instanceof Stick) {
          return Prelude.map(Prelude.functorArray)(function (_2) {
              return _2(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](sticks)(_22.block.value0)));
      };
      if (_22.block instanceof Square) {
          return Prelude.map(Prelude.functorArray)(function (_3) {
              return _3(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](squares)(_22.block.value0)));
      };
      if (_22.block instanceof Tturn) {
          return Prelude.map(Prelude.functorArray)(function (_4) {
              return _4(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](tturns)(_22.block.value0)));
      };
      if (_22.block instanceof RightSnake) {
          return Prelude.map(Prelude.functorArray)(function (_5) {
              return _5(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](rsnakes)(_22.block.value0)));
      };
      if (_22.block instanceof LeftSnake) {
          return Prelude.map(Prelude.functorArray)(function (_6) {
              return _6(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](lsnakes)(_22.block.value0)));
      };
      if (_22.block instanceof LeftGun) {
          return Prelude.map(Prelude.functorArray)(function (_7) {
              return _7(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](lguns)(_22.block.value0)));
      };
      if (_22.block instanceof RightGun) {
          return Prelude.map(Prelude.functorArray)(function (_8) {
              return _8(_22.pos);
          })(Data_Maybe_Unsafe.fromJust(Data_Array["!!"](rguns)(_22.block.value0)));
      };
      throw new Error("Failed pattern match at Main line 129, column 1 - line 130, column 1: " + [ _22.constructor.name ]);
  };
  var colorOf = function (_23) {
      if (_23 instanceof Stick) {
          return "cyan";
      };
      if (_23 instanceof Square) {
          return "yellow";
      };
      if (_23 instanceof Tturn) {
          return "purple";
      };
      if (_23 instanceof RightSnake) {
          return "green";
      };
      if (_23 instanceof LeftSnake) {
          return "red";
      };
      if (_23 instanceof LeftGun) {
          return "blue";
      };
      if (_23 instanceof RightGun) {
          return "orange";
      };
      throw new Error("Failed pattern match at Main line 138, column 1 - line 139, column 1: " + [ _23.constructor.name ]);
  };
  var drawOwnBlock = function (own) {
      return Data_Foldable.for_(Control_Monad_Free.applicativeFree(Data_Coyoneda.functorCoyoneda))(Data_Foldable.foldableArray)(points(own))(function (p) {
          return drawCell(Data_Int.toNumber(p.y))(Data_Int.toNumber(p.x))(colorOf(own.block));
      });
  };
  var render = function (game) {
      return withContext(Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(drawBackground)(function () {
          return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(drawGrid)(function () {
              return Prelude.bind(Control_Monad_Free.bindFree(Data_Coyoneda.functorCoyoneda))(drawOwnBlock(game.own))(function () {
                  return drawCells(game.cells);
              });
          });
      }));
  };
  var canMove = function (f) {
      return function (game) {
          var points1 = points(game.own);
          var points2 = Prelude.map(Prelude.functorArray)(f)(points1);
          return Data_Foldable.all(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Prelude.id(Prelude.categoryFn))(Prelude.map(Prelude.functorArray)(isAvailPos(game.cells))(points2));
      };
  };
  var breakLines = function (game) {
      var pull = function (plane) {
          return function (ridx) {
              var go = function (__copy_ridx_1) {
                  return function (__copy_plane_1) {
                      var ridx_1 = __copy_ridx_1;
                      var plane_1 = __copy_plane_1;
                      tco: while (true) {
                          var _99 = ridx_1 > 0;
                          if (_99) {
                              var plane$prime = swapRow(ridx_1)(ridx_1 - 1)(plane_1);
                              var __tco_ridx_1 = ridx_1 - 1;
                              ridx_1 = __tco_ridx_1;
                              plane_1 = plane$prime;
                              continue tco;
                          };
                          if (!_99) {
                              return plane_1;
                          };
                          throw new Error("Failed pattern match at Main line 279, column 5 - line 280, column 5: " + [ _99.constructor.name ]);
                      };
                  };
              };
              return go(ridx)(plane);
          };
      };
      var $$break = function (plane) {
          return function (ridx) {
              var emptyRow = Data_List.toList(Data_Foldable.foldableArray)(Prelude.map(Prelude.functorArray)(function (_20) {
                  return EmptyCell.value;
              })([ Data_List[".."](0)(19) ]));
              var plane$prime = Data_Maybe_Unsafe.fromJust(Data_List.updateAt(ridx)(emptyRow)(plane));
              return plane$prime;
          };
      };
      var ridx = fullRows(game.cells);
      var cells1 = Data_Foldable.foldlDefault(Data_List.foldableList)($$break)(game.cells)(ridx);
      var cells2 = Data_Foldable.foldlDefault(Data_List.foldableList)(pull)(cells1)(ridx);
      var _101 = {};
      for (var _102 in game) {
          if (game.hasOwnProperty(_102)) {
              _101[_102] = game[_102];
          };
      };
      _101.cells = cells2;
      return _101;
  };
  var abandonOwn = function (game) {
      var color = colorOf(game.own.block);
      var coloring = function (cells) {
          return function (point) {
              return set(point.y)(point.x)(new Cell(color))(cells);
          };
      };
      var c = Data_Foldable.foldlDefault(Data_Foldable.foldableArray)(coloring)(game.cells)(points(game.own));
      var _103 = {};
      for (var _104 in game) {
          if (game.hasOwnProperty(_104)) {
              _103[_104] = game[_104];
          };
      };
      _103.cells = c;
      return _103;
  };
  var step = function (_25) {
      return function (game) {
          if (_25 instanceof Tick) {
              return step(DownPress.value)(game);
          };
          if (_25 instanceof LeftPress) {
              if (game.playing) {
                  var _108 = canMove(left)(game);
                  if (_108) {
                      return moveBlock(left)(game);
                  };
                  if (!_108) {
                      return game;
                  };
                  throw new Error("Failed pattern match: " + [ _108.constructor.name ]);
              };
              if (!game.playing) {
                  return game;
              };
              throw new Error("Failed pattern match: " + [ game.playing.constructor.name ]);
          };
          if (_25 instanceof RightPress) {
              if (game.playing) {
                  var _110 = canMove(right)(game);
                  if (_110) {
                      return moveBlock(right)(game);
                  };
                  if (!_110) {
                      return game;
                  };
                  throw new Error("Failed pattern match: " + [ _110.constructor.name ]);
              };
              if (!game.playing) {
                  return game;
              };
              throw new Error("Failed pattern match: " + [ game.playing.constructor.name ]);
          };
          if (_25 instanceof UpPress) {
              if (game.playing) {
                  var next = nextShape(game.own.block);
                  var game$prime = (function () {
                      var _114 = {};
                      for (var _115 in game) {
                          if (game.hasOwnProperty(_115)) {
                              _114[_115] = game[_115];
                          };
                      };
                      _114.own = (function () {
                          var _112 = {};
                          for (var _113 in game.own) {
                              if (game.own.hasOwnProperty(_113)) {
                                  _112[_113] = game.own[_113];
                              };
                          };
                          _112.block = next;
                          return _112;
                      })();
                      return _114;
                  })();
                  var _116 = canMove(Prelude.id(Prelude.categoryFn))(game$prime);
                  if (_116) {
                      return rotateBlock(game);
                  };
                  if (!_116) {
                      return game;
                  };
                  throw new Error("Failed pattern match: " + [ _116.constructor.name ]);
              };
              if (!game.playing) {
                  return game;
              };
              throw new Error("Failed pattern match: " + [ game.playing.constructor.name ]);
          };
          if (_25 instanceof DownPress) {
              if (game.playing) {
                  var _118 = canMove(down)(game);
                  if (_118) {
                      return moveBlock(down)(game);
                  };
                  if (!_118) {
                      var g1 = abandonOwn(game);
                      var g2 = breakLines(g1);
                      var g3 = (function () {
                          var _119 = {};
                          for (var _120 in g2) {
                              if (g2.hasOwnProperty(_120)) {
                                  _119[_120] = g2[_120];
                              };
                          };
                          _119.own = nextOwn(game.own);
                          return _119;
                      })();
                      var _121 = canMove(Prelude.id(Prelude.categoryFn))(g3);
                      if (_121) {
                          return g3;
                      };
                      if (!_121) {
                          return finish(g3);
                      };
                      throw new Error("Failed pattern match: " + [ _121.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _118.constructor.name ]);
              };
              if (!game.playing) {
                  return game;
              };
              throw new Error("Failed pattern match: " + [ game.playing.constructor.name ]);
          };
          if (_25 instanceof SpacePress) {
              var go = function (__copy_game_2) {
                  var game_2 = __copy_game_2;
                  tco: while (true) {
                      var _122 = canMove(down)(game_2);
                      if (_122) {
                          var game$prime = moveBlock(down)(game_2);
                          game_2 = game$prime;
                          continue tco;
                      };
                      if (!_122) {
                          return step(DownPress.value)(game_2);
                      };
                      throw new Error("Failed pattern match: " + [ _122.constructor.name ]);
                  };
              };
              if (game.playing) {
                  return go(game);
              };
              if (!game.playing) {
                  return game;
              };
              throw new Error("Failed pattern match: " + [ game.playing.constructor.name ]);
          };
          if (_25 instanceof None) {
              return game;
          };
          throw new Error("Failed pattern match: " + [ _25.constructor.name, game.constructor.name ]);
      };
  };
  var main = Control_Monad_Eff_JQuery.ready(function __do() {
      var _17 = Signal_DOM.keyPressed(37)();
      var _16 = Signal_DOM.keyPressed(38)();
      var _15 = Signal_DOM.keyPressed(39)();
      var _14 = Signal_DOM.keyPressed(40)();
      var _13 = Signal_DOM.keyPressed(32)();
      return (function () {
          var actions = Data_Maybe_Unsafe.fromJust(Signal.mergeMany(Prelude.functorArray)(Data_Foldable.foldableArray)([ Signal["~>"](Signal.functorSignal)(Signal_Time.every(500.0))(function (_21) {
              return Tick.value;
          }), Signal["~>"](Signal.functorSignal)(_17)(function (t) {
              if (t) {
                  return LeftPress.value;
              };
              if (!t) {
                  return None.value;
              };
              throw new Error("Failed pattern match at Main line 360, column 7 - line 369, column 3: " + [ t.constructor.name ]);
          }), Signal["~>"](Signal.functorSignal)(_16)(function (t) {
              if (t) {
                  return UpPress.value;
              };
              if (!t) {
                  return None.value;
              };
              throw new Error("Failed pattern match at Main line 360, column 7 - line 369, column 3: " + [ t.constructor.name ]);
          }), Signal["~>"](Signal.functorSignal)(_15)(function (t) {
              if (t) {
                  return RightPress.value;
              };
              if (!t) {
                  return None.value;
              };
              throw new Error("Failed pattern match at Main line 360, column 7 - line 369, column 3: " + [ t.constructor.name ]);
          }), Signal["~>"](Signal.functorSignal)(_14)(function (t) {
              if (t) {
                  return DownPress.value;
              };
              if (!t) {
                  return None.value;
              };
              throw new Error("Failed pattern match at Main line 360, column 7 - line 369, column 3: " + [ t.constructor.name ]);
          }), Signal["~>"](Signal.functorSignal)(_13)(function (t) {
              if (t) {
                  return SpacePress.value;
              };
              if (!t) {
                  return None.value;
              };
              throw new Error("Failed pattern match at Main line 360, column 7 - line 369, column 3: " + [ t.constructor.name ]);
          }) ]));
          var gameLogic = Signal.foldp(step)(newGameState)(actions);
          return Signal.runSignal(Signal["~>"](Signal.functorSignal)(gameLogic)(render));
      })()();
  });
  exports["NewGame"] = NewGame;
  exports["Tick"] = Tick;
  exports["LeftPress"] = LeftPress;
  exports["UpPress"] = UpPress;
  exports["RightPress"] = RightPress;
  exports["DownPress"] = DownPress;
  exports["SpacePress"] = SpacePress;
  exports["None"] = None;
  exports["Stick"] = Stick;
  exports["Square"] = Square;
  exports["Tturn"] = Tturn;
  exports["RightSnake"] = RightSnake;
  exports["LeftSnake"] = LeftSnake;
  exports["LeftGun"] = LeftGun;
  exports["RightGun"] = RightGun;
  exports["Cell"] = Cell;
  exports["EmptyCell"] = EmptyCell;
  exports["main"] = main;
  exports["render"] = render;
  exports["step"] = step;
  exports["finish"] = finish;
  exports["breakLines"] = breakLines;
  exports["fullRows"] = fullRows;
  exports["nextOwn"] = nextOwn;
  exports["abandonOwn"] = abandonOwn;
  exports["canMove"] = canMove;
  exports["isAvailPos"] = isAvailPos;
  exports["inBound"] = inBound;
  exports["rotateBlock"] = rotateBlock;
  exports["moveBlock"] = moveBlock;
  exports["newGameState"] = newGameState;
  exports["drawCells"] = drawCells;
  exports["drawCell"] = drawCell;
  exports["drawOwnBlock"] = drawOwnBlock;
  exports["drawGrid"] = drawGrid;
  exports["drawBackground"] = drawBackground;
  exports["withContext"] = withContext;
  exports["nextShape"] = nextShape;
  exports["colorOf"] = colorOf;
  exports["points"] = points;
  exports["rguns"] = rguns;
  exports["lguns"] = lguns;
  exports["lsnakes"] = lsnakes;
  exports["rsnakes"] = rsnakes;
  exports["tturns"] = tturns;
  exports["squares"] = squares;
  exports["sticks"] = sticks;
  exports["down"] = down;
  exports["up"] = up;
  exports["right"] = right;
  exports["left"] = left;
  exports["minus"] = minus;
  exports["move"] = move;
  exports["swapRow"] = swapRow;
  exports["set"] = set;
  exports["get"] = get;
  exports["height"] = height;
  exports["width"] = width;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
